.TH "JSQ\-QL" "1" "August 2017" "" ""
.SH "NAME"
\fBjsq-ql\fR \- jsq(1) query language interpretor
.SH DESCRIPTION
.P
jsq\-ql is the query language used by jsq(1) to search for JavaScript
expressions\.
.P
Queries are designed to be familiar to the JavaScript programmer by loosely
following the JavaScript syntax\.
.SH HOW TO USE THIS GUIDE
.RS 0
.IP \(bu 2
Placeholder tokens that should be substituted are denoted by surrounding the
token with the \fB%\fP symbol\. For example, the \fB%identifier%\fP token in a
function call expression must be substituted by the function name that is
being searched for\.
.IP \(bu 2
Tokens inside brackets (\fB[]\fP) are optional\.
.IP \(bu 2
Tokens inside nested brackets (\fB[X[,\.\.\.X]]\fP) indicates the token may be
repeated\.
.IP \(bu 2
All other characters must be regarded verbatim\.

.RE
.SH EXPRESSIONS
.P
A jsq query is composed of either a single expression or multiple expressions
joined by an expression production operator like \fB\|\.\fP\|\.
.SS Calls to static functions
.P
Query calls to static functions\.
.P
SYNTAX
.P
.RS 2
.nf
%identifier%([ :void | Type[, \.\.\.Type] ])
.fi
.RE
.P
WHERE
.RS 0
.IP \(bu 2
\fBType\fP may be a type expression or the symbol \fB*\fP to match any type

.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Call to static function "f" with any number of arguments
f()

# Call to static function "f" with 0 arguments
f(:void)

# Call to static function "f" with 2 arguments of any type
f(*, *)

# Call to static function "f" with 2 arguments, the first
# being the number value 42 while the second being of any type
f(42, *)

# Call to static function "f" with 2 arguments, the first
# being a String of any value
f(:string, *)

# Call to static function "f" with 2 arguments, the last
# being an object that has a "bar" property
f(*, { bar })

# Call to static function "f" with 2 arguments, the last
# being an object that does not have a "bar" property
f(*, { ^bar })

# Call to static function "f" with an argument that is a function 
# of arity 2
f(:func(2))
.fi
.RE
.SS Calls to member functions
.P
Query calls to functions defined on an object\.
.P
SYNTAX
.P
.RS 2
.nf
[Receiver\.]%identifier%([ :void | [ Type[, \.\.\.Type] ] ])
.fi
.RE
.P
WHERE
.RS 0
.IP \(bu 2
\fBReceiver\fP may be an identifier or \fB*\fP to match any identifier or \fB**\fP
to match all preceding identifiers if any

.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Call to function "f" on any receiver with any number of arguments
*\.f()

# Call to function "f" on the receiver "this"
this\.f()

# Call to function "f" on either the receiver "this" or "store"
(this | store)\.f()

# Call to function "f" on the default export of the "store\.js" module
:exportOf(store\.js)\.f()

# Call to function "f" on instances of class X
:of(X)\.f()

# Call to function "f" on an *instance* of the default export of the 
# "store\.js" module
:of(:exportOf(store\.js))\.f()

# Call to function "then" (e\.g\. Promise) with the second argument being
# a function that returns another Promise using the "new" keyword
**\.then(*, :func(*, :of(Promise)))

# Call to function "then" where:
# 1) the receiver is the return value of the call to function "request" 
#    provided by the module "ajax\.js"
# 2) the first argument is null
# 3) the second argument is a function of any arity
:exportOf(ajax\.js)\.request()\.then(null, :func)
.fi
.RE
.SS Access of object properties
.P
SYNTAX
.P
.RS 2
.nf
[Receiver\.]%identifier%
.fi
.RE
.P
WHERE
.RS 0
.IP \(bu 2
\fBReceiver\fP may be an identifier or \fB*\fP to match any identifier or \fB**\fP
to match all preceding identifiers if any

.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Access to the property "x" of the identifier "a"
a\.x
.fi
.RE
.SS Properties of JSX elements
.P
Query instantiated JSX elements with certain properties\.
.P
SYNTAX
.P
.RS 2
.nf
<%identifier% [\.\.\.JSXProperty] />
.fi
.RE
.P
Where \fBJSXProperty\fP is defined as:
.P
.RS 2
.nf
%key%[={Type}]
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# find Link components:
<Link />

# find Link components with an onClick property defined:
<Link onClick /

# find Link components without an onClick property defined:
<Link ^onClick />

# find Link components with onClick having a boolean value
<Link onClick={:bool} />

# find Link components with onClick being a function of arity 2:
<Link onClick={:func(2)} />

# find Link components with an href value of either an array of strings, 
# or an object:
<Link href={(:array(:string) | :object)} />
.fi
.RE
.SS Use of exported symbols from modules
.P
This type matcher is available only for scripts that use either the ES6 Module
format or the CommonJS format\.
.P
SYNTAX
.P
.RS 2
.nf
:exportOf(%file%[, %symbol%])
.fi
.RE
.P
When \fB%export%\fP is omitted, the \fBdefault\fP export is assumed\.
.P
EXAMPLES
.P
.RS 2
.nf
# All references to the identifier assigned to the default export of the 
# "ajax\.js" module
:exportOf(ajax\.js)

# Call to the default export of the ajax\.js module
:exportOf(ajax\.js)()

# Access to the "x" member of the default export of the ajax\.js module
:exportOf(ajax\.js)\.x

# Call to the "toJSON" member of the default export of the ajax\.js module
:exportOf(ajax\.js)\.toJSON()

# Import of the "x" export of the ajax\.js module
:exportOf(ajax\.js, x)
.fi
.RE
.SH TYPE EXPRESSIONS
.P
The constructs described in this section may be used anywhere \fBType\fP is
referenced in an expression syntax synopsis but can not be used as a query
expression unless stated otherwise in the documentation\.
.P
Type expressions may be negated by prefixing them with the \fB^\fP symbol if the
expression syntax defines it\.
.P
The special \fB*\fP type expression will match any type\.
.P
The special \fB:void\fP type expression will not match if anything in its position
is defined\.
.SS Function values
.P
SYNTAX
.P
.RS 2
.nf
:func[(Arity[, Type | :void])]
.fi
.RE
.P
WHERE
.RS 0
.IP \(bu 2
\fBArity\fP is a number denoting the number of arguments the function has,
.IP \(bu 2
\fBType\fP is the type of the return value of the function\.

.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Any function
:func

# A function that accepts 1 argument
:func(1)

# A function that accepts any number of argument and returns anything
:func(*)

# A function that accepts anything and returns a boolean value
:func(*, :bool)

# A function that accepts anything and returns nothing
:func(*, :void)

# A function that returns something other than a boolean (or nothing at
# all)
:func(*, ^:bool)

# Equivalent to :func
:func(*, *)
.fi
.RE
.SS String values
.P
SYNTAX
.P
.RS 2
.nf
:string | "%string%"
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Any string
:string

# An empty string
""

# The "foo" string
"foo"
.fi
.RE
.P
\fBWildcards\fR
.P
The character sequence \fB\|\.*\fP found in string matchers is treated as a wildcard\.
.P
EXAMPLES
.P
.RS 2
.nf
# Match "Hello", "Hello World!", or `Hello ${'anything'}`
"Hello\.*"
.fi
.RE
.SS Object values
.P
SYNTAX
.P
.RS 2
.nf
:object | { [ObjectProperty[,\.\.\.ObjectProperty]] }
.fi
.RE
.P
Where \fBObjectProperty\fP is defined as:
.P
.RS 2
.nf
[^]%key%[: [^]Type]
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Object has 0 more properties
:object

# Object has 0 properties (i\.e\. an empty object)
{}

# Object has the "a" property
{ a }

# Object does not have the "a" property
{ ^a }

# Object has both the "a" and "b" properties
{ a, b }

# Object has the "a" property but not the "b" property
{ a, ^b }

# Object may have the "a" property but not the "b" property
{ ?a, ^b }

# Object is not empty but has neither "a" nor "b" for properties
{ ^a, ^b }

# Object has the "a" property with a value of a numerical type
{ a: :number }

# Object has the "a" property with a value of type other than a number
{ a: ^:number }
.fi
.RE
.SS Boolean values
.P
SYNTAX
.P
.RS 2
.nf
:bool | true | false
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Any boolean value
:bool

# A true value
true

# A false value
false
.fi
.RE
.SS Class instances
.P
Match objects instantiated using the \fBnew\fP keyword\.
.P
SYNTAX
.P
.RS 2
.nf
:of(%identifier% | Type)
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# An instance of a class or function named X
:of(X)

# An instance of the default export of the module "class\.js"
:of(:exportOf(class\.js))
.fi
.RE
.SS Numerical values
.P
SYNTAX
.P
.RS 2
.nf
:number | [\-]%number%
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# Any number
:number

# The number 42
42

# The number \-0\.5
\-0\.5
.fi
.RE
.SS Regular expressions
.P
SYNTAX
.P
.RS 2
.nf
:regexp | /%pattern%/
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# match any kind of regex; literal or constructed using new RegExp()
:regexp

# match a regexp that has "foo" for a pattern:
/foo/
.fi
.RE
.SH TYPE EXPRESSION KEYWORDS
.P
This group of matchers may receive a special treatment depending on where
they're used\.
.RS 0
.IP \(bu 2
\fB*\fP \- denotes anything (including nothing)
.IP \(bu 2
\fB**\fP \- greedy anything
.IP \(bu 2
\fB:void\fP \- nothing
.IP \(bu 2
\fB^:void\fP \- something

.RE
.P
EXAMPLES
.P
.RS 2
.nf
# A function call with no arguments
f(:void)

# A function call with the first argument being of any type
f(*)

# A function call to "f" on any receiver (*)
*\.f()

# A function call to "f" on any receiver, no matter how deeply nested:
**\.f()

# A callback that accepts any number of arguments and returns nothing
f(:func(*, :void))
.fi
.RE
.SH TYPE EXPRESSION UNIONS
.P
A type expression union makes it possible to match multiple types at any
certain position\.
.P
SYNTAX
.P
.RS 2
.nf
(Type | Type [|\.\.\.Type])
.fi
.RE
.P
EXAMPLES
.P
.RS 2
.nf
# An object or a string
(:object | :string)

# Object does not have the "a" property or does but it's not a number
({ ^a } | { a: ^:number })
.fi
.RE

